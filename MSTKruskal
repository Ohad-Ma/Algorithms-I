* The algorithm starts with |V| different trees (each tree consists of one of the vertices in V). 

* At each step unions two trees by adding the edge with  minimal weight that doesn't creates a cycle.


Psuedo:
MST-Kruskal(G,w){
    A <- NULL
    for each vertex v in V(G){
        Make-Set(v)
    }
    sort the edges in E(G) by non-decreasing weight w
    for each edge(u,v) in E(G) in order by non-decreasing weight{
        if Find-Set(u) != Find-Set(v):
            A <- A union {(u,v)}
            Union(u,v)
    }
    return A
}

Running Time:
Assuming that the optimized union-find is used. Therefore, the runtime is (Elog(E)) = O(Elog(V))